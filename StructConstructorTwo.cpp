/*
Конструкторов у структуры может быть несколько. Для строки может оказаться полезным заполняющий конструктор (например, чтобы создать строку пробелов). Заполняющий конструктор принимает число и символ, и создает строку с заданным количеством повторений переданного символа. Условия налагаемые на реализацию конструктора те же самые (в поле size размер без учета завершающего 0 символа, в поле str C-style строка, т.е. с завершающим 0 символом). Кроме конструктора в этой задаче вам нужно также реализовать и деструктор, который освободит выделенную память. 

Требования к решению: в этом задании не нужно вводить или выводить что-либо, не нужно реализовывать функцию main. Для работы с памятью не используйте функции из cstdlib (malloc, calloc, realloc и free).
*/

#include <cstddef> // size_t
#include <cstring> // strlen, strcpy

struct String {

    /* Реализуйте этот конструктор */
    String(size_t n, char c) {
        this->size = n;
        this->str = new char[n+1];
        for (size_t i = 0; i != n; ++i) {
            this->str[i] = c;
        }
        this->str[n+1] = '\0';
        
    }

    /* и деструктор */
    ~String() {
        delete [] str;
    }


	size_t size;
	char *str;
};